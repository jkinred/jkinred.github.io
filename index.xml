<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jonathan&#39;s Work Examples</title>
    <link>https://jkinred.github.io/</link>
    <description>Recent content on Jonathan&#39;s Work Examples</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Dec 2018 12:10:01 +1100</lastBuildDate>
    
	<atom:link href="https://jkinred.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Jupyter with custom environments</title>
      <link>https://jkinred.github.io/post/using-jupyter/</link>
      <pubDate>Sun, 02 Dec 2018 12:10:01 +1100</pubDate>
      
      <guid>https://jkinred.github.io/post/using-jupyter/</guid>
      <description>This post demonstrates running a &amp;ldquo;global&amp;rdquo; user-scoped Jupyter notebook that can be used to manage a collection of notebooks across many projects.
Using Jupyter in this way builds on top of a common workflow using IPython for interactive development, which has been a common process for me during development.
An example of when this is especially useful, would be when applying logic to a data construct which I am not familiar with by allowing interactive exploration of the data and then rolling up the code from that exercise into the actual code.</description>
    </item>
    
    <item>
      <title>X1 Carbon Gen 6 Sleep on Fedora</title>
      <link>https://jkinred.github.io/post/x1-carbon-gen-6-sleep-on-fedora/</link>
      <pubDate>Tue, 06 Mar 2018 08:04:40 +1100</pubDate>
      
      <guid>https://jkinred.github.io/post/x1-carbon-gen-6-sleep-on-fedora/</guid>
      <description>Update: Since BIOS version 1.30, the X1 Carbon supports S3 mode when enabled in the BIOS menu (choose &amp;ldquo;Linux&amp;rdquo; sleep mode instead of the default &amp;ldquo;Windows 10&amp;rdquo;).
Some one-liners, for dealing with the lack of regular sleep states on the X1 Carbon Generation 6.
$ dmesg | grep -i acpi | grep &#39;ACPI: (supports&#39; [ 0.216048] ACPI: (supports S0 S4 S5) cat /sys/power/mem_sleep [s2idle] cat /sys/power/state $ sudo dnf install iasl cpio $ sudo cat /sys/firmware/acpi/tables/DSDT &amp;gt; dsdt.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://jkinred.github.io/contact/</link>
      <pubDate>Sun, 26 Nov 2017 18:08:31 +1100</pubDate>
      
      <guid>https://jkinred.github.io/contact/</guid>
      <description>The best way to contact me is through my GitHub profile.</description>
    </item>
    
    <item>
      <title>DevOps Vagrant Box</title>
      <link>https://jkinred.github.io/post/devops-soe-for-newbs/</link>
      <pubDate>Sun, 26 Nov 2017 15:55:05 +1100</pubDate>
      
      <guid>https://jkinred.github.io/post/devops-soe-for-newbs/</guid>
      <description>&lt;p&gt;In this article I&amp;rsquo;ll describe a successful solution to a lingering problem we
faced: Getting &amp;ldquo;traditional&amp;rdquo; Ops people working with modern infrastructure
tooling.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS provisioning with Python boto</title>
      <link>https://jkinred.github.io/post/aws-provisioning-with-python-boto/</link>
      <pubDate>Sun, 26 Nov 2017 07:49:29 +1100</pubDate>
      
      <guid>https://jkinred.github.io/post/aws-provisioning-with-python-boto/</guid>
      <description>&lt;p&gt;In this post I describe an AWS provisioning system using Python boto to
provision cloud resources for a company transitioning from a traditional ITIL
model (with separate Engineering and Operations teams) to a more modern &amp;ldquo;DevOps&amp;rdquo;
way of working.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>